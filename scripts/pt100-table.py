#!/usr/bin/env python 
# -*- coding: utf-8 -*-
#/*
# This file is part of ddprint - a direct drive 3D printer firmware.
# 
# Copyright 2017 erwin.rieger@ibrieger.de
# 
# ddprint is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
# 
# ddprint is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
# 
# You should have received a copy of the GNU General Public License
# along with ddprint.  If not, see <http://www.gnu.org/licenses/>.
#*/


#
# Print a C-code table to convert between ADC value (0-1023) and the
# correspoding temperature.
# This is the table for the ultimaker2 board with pt100 and INA826 amplifier.
#

#
# Update Mon Jul 27 2020:
#
# Jennyprinter electronics are similar to UM2, using PT100 and INA826, too.
# ADC resolution is higher, 12 bits (0-4095)
# R2: 2.2k
# Rg: 5.49k
#
# Other resistors: 2*10k, 100R
#
import sys, math, os

# Adjust this to UM2 (1024) or JennyPrinter (4096)
# boardName = "ultimaker 2"
# AdcRes = 1024
# # Temperature for ADC values below 220 are lower than -8 °C
# # Temperature for ADC values above 614 are greater than 500 °C
# lowADC = 220
# highADC = 614


boardName = "JennyPrinter Shuttle Gear"
AdcRes = 4096
# Temperature for ADC values below 220 are lower than -8 °C
# Temperature for ADC values above 614 are greater than 500 °C
lowADC = 874
highADC = 1584

#
# GND -*- 2.2K -*- pt100 -*- 2.2k -*- Ub 5V
# Gain resistor
Rg = 5490.0
# Amplifier gain
G = 1 + 49400 / Rg 
#
R2 = 2200.0
#
Ub = 5.0
#
Rp0 = 100

# Pt100 coefficients
A = 3.9083e-3
B = -5.775e-7

def rFromUIn(uRp):

    if uRp == 0:
        return 0

    return 2*R2 / (Ub/uRp - 1.0)

# Test, uIn at 0°C:
# uIn0 = r0 * i0
# uIn0 = Rp0 * 5.0/4500 
# print "uin 0°C:", uIn0
# print "Test: rP 0°C (shold be 100ohm):", rFromUIn(uIn0)

#
print "//"
print "// Table to convert ADC values into temperatures."
print "// This is for the %s board with pt100 and INA826 amplifier." % boardName
print "// The table begins with ADC value %d." % lowADC
print "// The last table entry is for ADC value %d." % highADC
print "// Generated by script %s." % os.path.basename(sys.argv[0])
print "//"
print "#define ThermistorTableLowADC %d" % lowADC
print "#define ThermistorTableHighADC %d" % highADC
print "#define MaxThermistorTableIndex (ThermistorTableHighADC - ThermistorTableLowADC)"
print "const float thermistorTable[] PROGMEM = {"

i = 0
for adcIn in range(lowADC, highADC+1):

    uIn = 5.0/(AdcRes-1) * adcIn

    uRp = uIn / G

    # print "\nuin:", adcIn, uIn, uRp

    rP = rFromUIn(uRp)

    # print "rP:", rP

    t = ((-Rp0 * A) + math.sqrt( (Rp0**2 * A**2) - (4 * Rp0 * B * (Rp0 - rP)) )) / (2 * Rp0 * B)

    # print "t:", t

    print "    %f, // Index %d, ADC value %d" % (t, i, adcIn)

    i += 1

print "};"

